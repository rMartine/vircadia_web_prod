const t=new class{SAMPLE_RATE=24e3;STEREO=2;NETWORK_FRAME_SAMPLES_STEREO=480;NETWORK_FRAME_SAMPLES_PER_CHANNEL=240;NETWORK_FRAME_SECS=this.NETWORK_FRAME_SAMPLES_PER_CHANNEL/this.SAMPLE_RATE;NETWORK_FRAME_MSECS=1e3*this.NETWORK_FRAME_SECS};class e extends AudioWorkletProcessor{FLOAT_TO_INT=32767;LITTLE_ENDIAN=!0;_channelCount;_lastInput;_inputRange;_output;_outputView;_outputSize;_outputSampleSize;_outputIndex=0;_outputTotalIndex=0;_sourceSampleRate;_resampleRatio=1;constructor(e){super(e),this._channelCount=e?.channelCount?e.channelCount:1,this._sourceSampleRate=sampleRate,this._sourceSampleRate!==t.SAMPLE_RATE&&(this._resampleRatio=t.SAMPLE_RATE/this._sourceSampleRate),this._outputSize=1===this._channelCount?t.NETWORK_FRAME_SAMPLES_PER_CHANNEL:t.NETWORK_FRAME_SAMPLES_STEREO,this._outputSampleSize=this._outputSize/this._channelCount,this._output=new Int16Array(this._outputSize),this._outputView=new DataView(this._output.buffer),this._lastInput=[0,0],this._inputRange={begin:0,end:0},this.port.onmessage=this.onMessage}onMessage=t=>{"clear"===t.data&&(this._resetInput(0),this._resetOutput())};process(e){return!(e&&e[0]&&e[0][0])||2===this._channelCount&&!e[0][1]||(this._sourceSampleRate!==t.SAMPLE_RATE?this._resample(e[0]):this._convert(e[0]),!0)}_resetOutput(){this._output=new Int16Array(this._outputSize),this._outputView=new DataView(this._output.buffer),this._outputIndex=0}_resetInput(t){this._lastInput=[0,0],this._inputRange={begin:0,end:t}}_getResampled(t,e,s){const u=s[t],_=e-this._inputRange.begin;let i=0,n=0,o=0;if(_<0)o=1-_,i=this._lastInput[t],n=u[0];else{const t=Math.floor(_),e=Math.ceil(_);o=_-t,i=u[t],n=u[e]}return i+(n-i)*o}_resample(e){const s=e[0].length;if(0===s)return;this._inputRange.end+=s;let u=this._outputTotalIndex/this._resampleRatio;for(;Math.ceil(u)<this._inputRange.end;){const _=this._outputIndex*Int16Array.BYTES_PER_ELEMENT*this._channelCount;for(let t=0;t<this._channelCount;++t){const s=this._getResampled(t,u,e),i=t*Int16Array.BYTES_PER_ELEMENT;this._outputView.setInt16(_+i,s*this.FLOAT_TO_INT,this.LITTLE_ENDIAN)}this._outputTotalIndex+=1,this._outputIndex+=1,this._outputIndex===this._outputSampleSize&&(this.port.postMessage(this._output.buffer,[this._output.buffer]),this._resetOutput()),this._outputTotalIndex===t.SAMPLE_RATE&&(this._outputTotalIndex=0,this._resetInput(s)),u=this._outputTotalIndex/this._resampleRatio}for(let t=0;t<this._channelCount;++t){const s=e[t];this._lastInput[t]=s[s.length-1]}this._inputRange.begin+=s}_convert(t){const e=t[0].length;for(let s=0;s<e;++s){const e=this._outputIndex*Int16Array.BYTES_PER_ELEMENT*this._channelCount;for(let u=0;u<this._channelCount;++u){const _=t[u][s],i=u*Int16Array.BYTES_PER_ELEMENT;this._outputView.setInt16(e+i,_*this.FLOAT_TO_INT,this.LITTLE_ENDIAN)}this._outputIndex+=1,this._outputIndex===this._outputSampleSize&&(this.port.postMessage(this._output.buffer,[this._output.buffer]),this._resetOutput())}}}registerProcessor("vircadia-audio-input-processor",e);